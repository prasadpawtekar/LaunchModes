/*Program to create hole in a file*/

#include<stdio.h>
#include<stdlib.h>
#include<fcntl.h>
#include<unistd.h>
#include<string.h>
int main(int argc, char **argv) {
	char b1[] = "HPT Arts and";
	char b2[] = "RYK Science College";
	char command[100] = "sudo od -c ";
	int fd;
	off_t ans;

	fd = creat(argv[1], O_RDWR);

	if( fd == -1) {
		printf("\nError while creating file\n");
		return 0;
	}

	printf("\nFile is created successfully\n");
	
	write(fd, b1, strlen(b1));

	ans = lseek(fd, 200, SEEK_SET);

	if( ans == -1) {
		printf("\nError while seeking\n");
	} else {
		printf("\nSeek successful %d\n", ans);
	}

	write(fd, b2, strlen(b2));
	

	printf("\nFile contents after creating hole in it\n");
	printf("\nCommand : %s\n", strcat(command, argv[1]));
	system(command);
	return 0;
}

/*Display all the files from current directory whose size is greater than n bytes, where n is accept from user.*/

#include<stdio.h>
#include<dirent.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<stdlib.h>

int main(int argc, char *argv[]) {
	DIR *dp;
	struct stat info;
	struct dirent *dirp;
	long size;
	int count;

	printf("\nEnter size in bytes: ");
	scanf("%ld", &size);

	dp = opendir(".");

	if(dp == NULL) {
		printf("\nCannot open current directory\n");
		exit(0);
	}
	printf("\nFiles having size greater than or equal to %ld are: \n", size);
	printf("\n%-20s  File Size\n", "File name");
	while((dirp = readdir(dp)) != NULL) {
		if(stat(dirp -> d_name, &info) != -1) {
			if(info.st_size >= size) {
				printf("\n%-20s  %ld", dirp -> d_name, info.st_size);
				count++;
			}
		}
	}

	if(!count) {
		printf("\nNo files found having size greater than %ld", size);
	}
	exit(0);
}

/*Write a C program that demonstrates redirection of standard output to a file.*/
#include<stdlib.h>
#include<stdio.h>
#include<string.h>

#define bzeero(b, len) (memset((b), '\0', (len)), (void) 0)

int main(int argc, char *argv[]) {
	char d[50];

	if(argc == 2) {
		bzero(d, sizeof(d));
		strcat(d, "ls ");
		strcat(d, "> ");
		strcat(d, argv[1]);
		system(d);
	} else {
		printf("\nInvalid number of inputs");
	}

	return 0;
}

/*Write a C program that will only list all 
subdirectories in alphabetical order from 
current directory*/

#include<stdio.h> 
#include<dirent.h> 
#include<stdlib.h> 
#include<sys/stat.h>
#include<string.h>

typedef struct node {
	char *dirName;
	struct node *next;
} NODE;

NODE *first = NULL, *last = NULL;

void insertName(char name[]) {
	int n;
	NODE *newNode;
	n = strlen(name);
	newNode = (NODE *) malloc(sizeof(NODE));
	newNode -> next = NULL;
	newNode -> dirName = (char *) malloc(n*sizeof(char));
	strcpy(newNode -> dirName, name);

	if(first == NULL) {
		first = newNode;
	} else {
		last -> next = newNode;
	}
	last = newNode;
}

void sortList() {
	NODE *t1, *t2;
	char *temp;
	for(t1=first; t1 != NULL; t1 = t1 -> next) {
		for(t2 = t1-> next; t2 != NULL; t2 = t2 -> next) {
			if(strcmp(t2 -> dirName, t1 -> dirName) < 0) {
				temp = t1 -> dirName;
				t1 -> dirName = t2 -> dirName;
				t2 -> dirName = temp;
			}
		}
	}
}


void printList() {
	NODE *t = first;
	while(t != NULL) {
		printf("\n%s", t -> dirName);
		t = t -> next;
	}
	printf("\n");
}

void freeList() {
	NODE *t1, *t2;

	t1 = first;
	t2 = first -> next;
	do {
		free(t1 -> dirName);
		free(t1);
		t1 = t2;
		t2 = t2 -> next;
	} while(t2 != NULL);
	free(t2);
}
int main() {
	DIR *dp;
	struct stat info;
	struct dirent *dirp;

	dp = opendir(".");

	if(dp == NULL) {
		printf("\nCannot open current directory\n");
		exit(0);
	}

	while((dirp = readdir(dp)) != NULL) {
		stat(dirp -> d_name, &info);
		if(S_ISDIR(info.st_mode)) {
			if(strcmp(dirp -> d_name, ".") == 0 || strcmp(dirp -> d_name, "..") == 0) {

			} else {
				insertName(dirp -> d_name);
			}
		}
	}

	if(first != NULL) {
		sortList();
		printf("\nList of directories in alphabetical order as below:\n");
		printList();
		freeList();
	} else {
		printf("\nNo subdirectories present in current directory.\n");
	}

	return 0;
}

/*Assignment number 13:
Write a C program that redirects standard output to a file output.txt. Use of dup and open system call)
*/

#include<stdio.h>
#include<fcntl.h>
#include<stdlib.h>
#include<unistd.h>

int main(int argc, char *argv[]) {

	int fd;
	int stdfd;

	stdfd = dup(fileno(stdout));
	printf("\nThis text on standard output before redirection");
	if(argc != 2) {
		fprintf(stderr, "usage: %s outputfilename", argv[0]);
		exit(1);
	}

	fsync(fileno(stdout));

	fd = open(argv[1], O_CREAT|O_TRUNC|O_WRONLY, 0664);

	if(fd < 0) {
		perror(argv[1]);
		exit(1);
	}

	// Redirect standard output to the file
	if(dup2(fd, fileno(stdout)) < -1) {
		perror("Error redirecting standard output");
		exit(1);
	}

	// Now, standard output is redirected to argv[1] file

	printf("This text will be reidrected to %s file\n", argv[1]);
	fsync(fd);
	close(fd);
	// Restore standard ouput
	if(dup2(stdfd, fileno(stdout)) < 0) {
		perror("Error redirecting standard output");
		exit(1);
	}
	fsync(fileno(stdout));

	

	// Close the file descriptor for the redirected standard output
	

	// Example usage after restoring original standard output
	printf("\nThis text is back to the original standard output\n");
	return 0;
}

/*print the type of file where file name is accepted through command line arguments*/
#include<stdio.h>
#include<sys/stat.h>
int main(int argc, char **argv) {
	struct stat info;

	int fd;

	if(argc != 2) {
		printf("\nInvalid number of arguments.");
		return 0;
	}
	fd = stat(argv[1], &info);

	if(fd == -1) {
		printf("\n%s is invalid file", argv[1]);
		return 0;
	}
	if(S_ISDIR(info.st_mode)) {
		printf("\n%s is Directory", argv[1]);
	} else if(S_ISREG(info.st_mode)) {
		printf("\n%s is Regular file", argv[1]);
	} else if(S_ISBLK(info.st_mode)) {
		printf("\n%s is Block file", argv[1]);
	} else if(S_ISFIFO(info.st_mode)) {
		printf("\n%s is FIFO or Pipe file", argv[1]);
	} else if(S_ISCHR(info.st_mode)) {
		printf("\n%s is Character Special file", argv[1]);
	} else if(S_ISLNK(info.st_mode)) {
		printf("\n%s is Link File", argv[1]);
	} else if(S_ISSOCK(info.st_mode)) {
		printf("\n%s is Socket", argv[1]);
	}

	return 0;
}

/*Assignment 15: Generate parent process to write unnamed pipe and will read from it.*/
#include<stdio.h>
#include<unistd.h>
#include<string.h>
#define BUFFER_SIZE 128
int main() {
	int fd[2], ret;

	char buffer[] = "Google Info System";
	char readBuffer[BUFFER_SIZE];
	pid_t childPid;

	pipe(fd);

	childPid = fork();

	if(childPid == 0) {
		close(fd[0]);
		printf("\nChild process start communication by writting the data at output side of the pipe\n");
		write(fd[1], buffer, sizeof(buffer));
	} else {
		close(fd[1]);
		ret = read(fd[0], readBuffer, sizeof(readBuffer));
		printf("\nData read by parent process is \n%s\n", readBuffer);
	}

	return 0;
}

/*Assignment 16: Handle the two-way communication between parent and child processes using pipe.*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#define BUFFER_SIZE 100

int main() {
    int pipe_parent_to_child[2]; // Pipe from parent to child
    int pipe_child_to_parent[2]; // Pipe from child to parent
    pid_t child_pid;

    // Create pipes
    if (pipe(pipe_parent_to_child) == -1 || pipe(pipe_child_to_parent) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    // Fork a child process
    if ((child_pid = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
        // Child process
        close(pipe_parent_to_child[1]); // Close write end of the pipe from parent to child
        close(pipe_child_to_parent[0]); // Close read end of the pipe from child to parent

        char buffer[BUFFER_SIZE];
        ssize_t bytes_read;

        // Read from the pipe from parent
        bytes_read = read(pipe_parent_to_child[0], buffer, sizeof(buffer));
        if (bytes_read > 0) {
            printf("Child received from parent: %s", buffer);

            // Modify the message in some way
            strcat(buffer, " (modified by child)");

            // Write to the pipe from child
            write(pipe_child_to_parent[1], buffer, strlen(buffer));
        }

        close(pipe_parent_to_child[0]); // Close read end of the pipe from parent to child
        close(pipe_child_to_parent[1]); // Close write end of the pipe from child to parent
        exit(EXIT_SUCCESS);
    } else {
        // Parent process
        close(pipe_parent_to_child[0]); // Close read end of the pipe from parent to child
        close(pipe_child_to_parent[1]); // Close write end of the pipe from child to parent

        const char *message_parent = "Hello from the parent process!\n";
        char buffer_parent[BUFFER_SIZE];

        // Write to the pipe from parent
        write(pipe_parent_to_child[1], message_parent, strlen(message_parent));

        // Read from the pipe from child
        ssize_t bytes_read_parent = read(pipe_child_to_parent[0], buffer_parent, sizeof(buffer_parent));
        if (bytes_read_parent > 0) {
            printf("Parent received from child: %s", buffer_parent);
        }

        close(pipe_parent_to_child[1]); // Close write end of the pipe from parent to child
        close(pipe_child_to_parent[0]); // Close read end of the pipe from child to parent
        wait(NULL); // Wait for the child process to finish
        exit(EXIT_SUCCESS);
    }

    return 0;
}

/*Assignment 17: Demonstrate the use of atexit() function.*/
#include<stdio.h>
#include<stdlib.h>

static void exitTask1() {
	printf("\nThank you for using our services.\n");
}

static void exitTask2() {
	printf("\nLooking forward for your support\n");
}

static void exitTask3() {
	printf("\nSee you soon.\n");
}

int main() {
	if(atexit(exitTask1) == -1) {
		printf("\nCannot register exit1 function\n");
	}

	if(atexit(exitTask2) == -1) {
		printf("\nCannot register exit2 function\n");
	}

	if(atexit(exitTask3) == -1) {
		printf("\nCannot reigster exit3 function\n");
	}

	printf("\nMain function is done\n");

	return 0;
}

/*Assignment 19: Implement the following unix/linux command (use fork, pipe and exec system call)
ls –l | wc –l*/
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>

int main() {
	int a[2];
	int pid;

	pipe(a);

	pid = fork();

	if(pid == 0) {
		dup2(a[1], 1);
		close(a[1]);
		close(a[0]);
		execlp("/usr/bin/ls", "ls", "-l", NULL);
		perror("/bin/ls");
	} else if(pid>0) {
		dup2(a[0], 0);
		close(a[1]);
		close(a[0]);
		execlp("/usr/bin/wc", "wc", "-l", NULL);
		perror("/usr/bin/wc");
	} else {
		perror("fork()");
	}
	return 0;
}


/*Assignment 19: Implement the following unix/linux command (use fork, pipe and exec system call)
ls –l | wc –l*/
#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>

int main() {
	int a[2];
	int pid;

	pipe(a);

	pid = fork();

	if(pid == 0) {
		dup2(a[1], 1);
		close(a[1]);
		close(a[0]);
		execlp("/usr/bin/ls", "ls", "-l", NULL);
		perror("/bin/ls");
	} else if(pid>0) {
		dup2(a[0], 0);
		close(a[1]);
		close(a[0]);
		execlp("/usr/bin/wc", "wc", "-l", NULL);
		perror("/usr/bin/wc");
	} else {
		perror("fork()");
	}
	return 0;
}


/*Take multiple files as command line argument and print their inode numbers*/
#include<stdio.h>
#include <sys/stat.h>

int main(int argc, char **argv) {

	struct stat buf;
	int i;
	int fd;
	if(argc < 2) {
		printf("\nInvalid number of parameters. Need at least one parameter as file name.\n");
		return 0;
	}

	for(i=1; i<argc; i++) {
		fd = stat(argv[i], &buf);
		printf("\nFD = %d", fd);
		if(fd == 0) {
			printf("\nFile name: %s and Inode Number = %ld", argv[i], buf.st_ino);
		} else {
			printf("\nFile name: %s does not exist", argv[i]);
		}
	}

	return 0;
}

/*Assignment 20: Write a C program for Linux OS to create an unnamed pipe. The child process will write following
three messages to pipe and parent process display it.
Message1 = “Hello World”
Message2 = “Hello SPPU”
Message3 = “Linux is Funny”*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

#define BUFFER_SIZE 100

int main() {
    int pipe_fd[2];
    pid_t child_pid;

    // Create a pipe
    if (pipe(pipe_fd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    // Fork a child process
    if ((child_pid = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
        // Child process
        close(pipe_fd[0]); // Close read end of the pipe

        const char *message1 = "Hello World\n";
        const char *message2 = "Hello SPPU\n";
        const char *message3 = "Linux is Funny\n";

        // Write messages to the pipe
        write(pipe_fd[1], message1, strlen(message1));
        write(pipe_fd[1], message2, strlen(message2));
        write(pipe_fd[1], message3, strlen(message3));

        close(pipe_fd[1]); // Close write end of the pipe in the child
        exit(EXIT_SUCCESS);
    } else {
        // Parent process
        close(pipe_fd[1]); // Close write end of the pipe

        char buffer[BUFFER_SIZE];
        ssize_t bytes_read;

        // Read and display messages from the pipe
        while ((bytes_read = read(pipe_fd[0], buffer, sizeof(buffer))) > 0) {
            write(STDOUT_FILENO, buffer, bytes_read);
        }

        close(pipe_fd[0]); // Close read end of the pipe in the parent
        wait(NULL); // Wait for the child process to finish
        exit(EXIT_SUCCESS);
    }
}

#include <stdio.h>
#include <stdlib.h>
#include <sys/resource.h>

void print_resource_limits() {
    struct rlimit limit;

    // Get and print file size limit
    if (getrlimit(RLIMIT_FSIZE, &limit) == 0) {
        printf("File Size Limit: soft=%lu, hard=%lu\n", (unsigned long)limit.rlim_cur, (unsigned long)limit.rlim_max);
    } else {
        perror("getrlimit");
        exit(EXIT_FAILURE);
    }

    // Get and print virtual memory size limit
    if (getrlimit(RLIMIT_AS, &limit) == 0) {
        printf("Virtual Memory Limit: soft=%lu, hard=%lu\n", (unsigned long)limit.rlim_cur, (unsigned long)limit.rlim_max);
    } else {
        perror("getrlimit");
        exit(EXIT_FAILURE);
    }
}

void set_resource_limits() {
    struct rlimit new_limit;

    // Set file size limit
    new_limit.rlim_cur = 1024 * 1024;  // 1 MB (soft limit)
    new_limit.rlim_max = 2 * 1024 * 1024;  // 2 MB (hard limit)
    if (setrlimit(RLIMIT_FSIZE, &new_limit) != 0) {
        perror("setrlimit for file size");
        exit(EXIT_FAILURE);
    }

    // Set virtual memory size limit
    new_limit.rlim_cur = 1024 * 1024 * 10;  // 10 MB (soft limit)
    new_limit.rlim_max = 1024 * 1024 * 20;  // 20 MB (hard limit)
    if (setrlimit(RLIMIT_AS, &new_limit) != 0) {
        perror("setrlimit for virtual memory");
        exit(EXIT_FAILURE);
    }
}

int main() {
    printf("Before setting resource limits:\n");
    print_resource_limits();

    set_resource_limits();

    printf("\nAfter setting resource limits:\n");
    print_resource_limits();

    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pipe_fd[2];
    pid_t child_pid;

    // Create a pipe
    if (pipe(pipe_fd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    // Fork a child process
    if ((child_pid = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
        // Child process
        close(pipe_fd[0]); // Close read end of the pipe

        // Redirect stdout to the write end of the pipe
        dup2(pipe_fd[1], STDOUT_FILENO);

        // Close the original write end of the pipe
        close(pipe_fd[1]);

        // Execute ls -l
        execlp("ls", "ls", "-l", NULL);

        perror("execlp ls -l");
        exit(EXIT_FAILURE);
    } else {
        // Parent process
        close(pipe_fd[1]); // Close write end of the pipe

        // Redirect stdin to the read end of the pipe
        dup2(pipe_fd[0], STDIN_FILENO);

        // Close the original read end of the pipe
        close(pipe_fd[0]);

        // Execute grep .c
        execlp("grep", "grep", ".c", NULL);

        perror("execlp grep .c");
        exit(EXIT_FAILURE);
    }

    return 0;
}

/*Assignment 24: Program to get the exit status of child process*/
#include <stdio.h>
#include <stdlib.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t child_pid, terminated_pid;
    int status;

    // Fork a child process
    if ((child_pid = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
        // Child process
        printf("Child process is running...\n");
        // Simulate some work in the child process
        sleep(2);
        exit(42); // Child process exits with status 42
    } else {
        // Parent process
        printf("Parent process waiting for the child to terminate...\n");
        terminated_pid = waitpid(child_pid, &status, 0);

        if (terminated_pid == -1) {
            perror("waitpid");
            exit(EXIT_FAILURE);
        }

        if (WIFEXITED(status)) {
            // Child process terminated normally
            printf("Child process with PID %d terminated with exit status: %d\n", terminated_pid, WEXITSTATUS(status));
        } else if (WIFSIGNALED(status)) {
            // Child process terminated by a signal
            printf("Child process with PID %d terminated by signal: %d\n", terminated_pid, WTERMSIG(status));
        } else {
            // Should not reach here under normal circumstances
            printf("Child process terminated abnormally\n");
        }
    }

    return 0;
}

/*Assignment 25: Write a C program that catches the ctrl-c (SIGINT) signal for the first time and
display the appropriate message and exits on pressing ctrl-c again.*/

#include<stdio.h>
#include<stdlib.h>
#include<signal.h>

int sigint_count = 0;
int pressCount = 0;
void sigint_handler(int signum) {
	if(pressCount == 1) {
		exit(EXIT_SUCCESS);
	}
	if(signum == SIGINT) {
		printf("\nCaught SIGINT. Press Ctrl+C again to exit.\n");
		pressCount++;

	} else {
		printf("\nExiting on second Ctrl+c.\n");
		exit(EXIT_SUCCESS);
	}
	sigint_count++;
}

int main() {
	if(signal(SIGINT, sigint_handler) == SIG_ERR) {
		perror("signal");
		exit(EXIT_FAILURE);
	}

	printf("\nPress Ctrl+C to test the signal handler.\n");
	while(1) {

	}

	return 0;
}

/*Assignment 26: Write a C program which creates a child process and child process catches a signal
SIGHUP, SIGINT and SIGQUIT. The Parent process send a SIGHUP or SIGINT
signal after every 3 seconds, at the end of 15 second parent send SIGQUIT signal to
child and child terminates by displaying message "My Papa has Killed me!!!”.*/

#include<stdio.h>
#include<stdlib.h>
#include<signal.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>

void child_signal_handler(int signum) {
	switch(signum) {
	case SIGHUP:
		printf("\nChild received SIGHUP\n");
		break;

	case SIGINT:
		printf("\nChild received SIGINT\n");
		break;

	case SIGQUIT:
		printf("\nMy Papa has Killed me!!!\n");
		break;

	default:
		break;
	}
}

int main() {
	pid_t child_pid;

	child_pid = fork();

	if(child_pid == -1) {
		perror("fork");
		exit(EXIT_FAILURE);
	}

	if(child_pid == 0) {
		signal(SIGHUP, child_signal_handler);
		signal(SIGINT, child_signal_handler);
		signal(SIGQUIT, child_signal_handler);
		while(1) {

		}
	} else {
		// Parent process
		int i;
		for(i=0; i<4; ++i) {
			sleep(3);
			if(i%2 == 0) {
				kill(child_pid, SIGHUP);
			} else {
				kill(child_pid, SIGINT);
			}
		}

		sleep(3);
		kill(child_pid, SIGQUIT);
	}



}

#include<stdio.h>
#include<stdlib.h>
#include<signal.h>
#include<unistd.h>
#include<sys/types.h>

void alarm_handler(int signum) {
	if(signum == SIGALRM) {
		printf("\nAlarm is Fired!\n");
	}
}

int main() {
	pid_t child_pid;

	signal(SIGALRM, alarm_handler);

	child_pid = fork();

	if(child_pid == -1) {
		perror("fork");
		exit(EXIT_FAILURE);
	}

	if(child_pid == 0) {
		sleep(5);
		kill(getppid(), SIGALRM);
		exit(EXIT_SUCCESS);
	} else {
		printf("\nWaiting for the alarm...\n");

		while(1) {
			sleep(1);
		}
	}

	return 0;
}

/*Assignment 28: Write a C program that illustrates suspending and
 resuming processes using signals.*/

#include<stdio.h>
#include<stdlib.h>
#include<signal.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/wait.h>

// Signal handler function for SIGUSR1 (used to wake up the parent process)

void wakeup_handler(int signum) {
	// Do nothing in the signal handler
}

int main() {
	pid_t child_pid;

	signal(SIGUSR1, wakeup_handler);

	if((child_pid = fork()) == -1) {
		perror("fork");
		exit(EXIT_FAILURE);
	}

	if(child_pid == 0) {
		while(1) {
			printf("\nChild process is running...\n");
			sleep(1);
		}
	} else {
		// Paren process

		// Allow some time for the child process to start
		sleep(2);

		kill(child_pid, SIGSTOP);

		// Wait for a while

		sleep(3);
		printf("\nResuming the child process...\n");
		kill(child_pid, SIGCONT);

		// Allow the child process to run for a while
		sleep(5);

		printf("\nTerminate the child process using SIGTERM");
		kill(child_pid, SIGTERM);

		// Wait for the child process to terminate
		wait(NULL);

		printf("\nParent process exiting\n");
	}

	return 0;
}

/*Assignment 29: Write a C program which create a child process which catch a signal sighup, sigint
and sigquit. The Parent process send a sighup or sigint signal after every 3 seconds, at
the end of 30 second parent send sigquit signal to child and child terminates my
displaying message “My DADDY has Killed me!!!”.
*/
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void child_signal_handler(int signum) {
    switch (signum) {
        case SIGHUP:
            printf("Child received SIGHUP\n");
            break;
        case SIGINT:
            printf("Child received SIGINT\n");
            break;
        case SIGQUIT:
            printf("My DADDY has Killed me!!!\n");
            exit(EXIT_SUCCESS);
            break;
        default:
            break;
    }
}

int main() {
    pid_t child_pid;

    // Fork a child process
    if ((child_pid = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
        // Child process
        // Set signal handlers for SIGHUP, SIGINT, and SIGQUIT
        signal(SIGHUP, child_signal_handler);
        signal(SIGINT, child_signal_handler);
        signal(SIGQUIT, child_signal_handler);

        // Infinite loop to keep the child process running
        while (1) {
            // Do nothing, wait for signals
        }

        // The child process will never reach here due to the infinite loop
    } else {
        // Parent process
        int i;

        // Send either SIGHUP or SIGINT every 3 seconds for 30 seconds
        for (i = 0; i < 10; ++i) {
            sleep(3);
            if (i % 2 == 0) {
                kill(child_pid, SIGHUP);
            } else {
                kill(child_pid, SIGINT);
            }
        }

        // Send SIGQUIT after 30 seconds
        sleep(3);
        kill(child_pid, SIGQUIT);

        // Wait for the child process to terminate
        wait(NULL);

        printf("Parent process exiting.\n");
    }

    return 0;
}

/*Write a C program to find the properties such as inode number, number of hard links, 
file permissions, file size, file access and modification time and so on of a given file 
using stat() system call*/

#include<stdio.h>
#include<sys/stat.h>
#include<time.h>
#include<sys/types.h>
#include<unistd.h>
#include<dirent.h>
#include<string.h>
#include<stdlib.h>

int main(int argc, char **argv) {

	struct stat info;
	int fd;

	if(argc != 2) {
		printf("\nInvalid number of paramenter. Required one parameter as file name.");
		return 0;
	}

	fd = stat(argv[1], &info);

	if(fd == -1) {
		printf("\nFailed to get the file info");
		return 0;
	}

	printf("\nInode Number : %ld", info.st_ino);
	printf("\nNumber of hard links: %d", info.st_nlink);
	printf("\nFile access: ");

	if(info.st_mode & R_OK) {
		printf("\nREAD");
	}

	if(info.st_mode & W_OK) {
		printf("\nWRITE");
	}

	if(info.st_mode & X_OK) {
		printf("\nEXECUTE");
	}


	printf("\nFile size: %ld bytes", info.st_size);
	printf("\nLast file access time: %s", ctime(&info.st_atime));
	printf("\nLast file modification time: %s", ctime(&info.st_mtime));

	return 0;
}

/*// Assignmnet30: Write a C program to implement the following unix/linux command (use fork, pipe
and exec system call). Your program should block the signal Ctrl-C and Ctrl-\ signal
during the execution. i. Ls –l | wc –l*/

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>
#include<signal.h>

void signal_handler(int signum) {
	// Empty signal handler to block signals during child execution
}

int main() {
	pid_t child1_pid, child2_pid;

	int pipe_fd[2];

	signal(SIGINT, signal_handler);
	signal(SIGQUIT, signal_handler);

	// Create a pipe

	if(pipe(pipe_fd) == -1) {
		perror("pipe");
		exit(EXIT_FAILURE);
	}

	// Fork the first child process for ls -l
	if((child1_pid = fork()) == -1) {

		close(pipe_fd[0]); // close read end of the pipe

		// Redirect stdout to the write end of the pipe
		dup2(pipe_fd[1], STDOUT_FILENO);

		// close the original write end of the pipe
		close(pipe_fd[1]);
		execlp("ls", "ls", "-l", NULL);

		perror("execlp ls -l");
		exit(EXIT_FAILURE);
	} else {
		if (child2_pid == 0) {
            // Child process for wc -l
            close(pipe_fd[1]); // Close write end of the pipe

            // Redirect stdin to the read end of the pipe
            dup2(pipe_fd[0], STDIN_FILENO);

            // Close the original read end of the pipe
            close(pipe_fd[0]);

            // Execute wc -l
            execlp("wc", "wc", "-l", NULL);

            perror("execlp wc -l");
            exit(EXIT_FAILURE);
        } else {
            // Close both ends of the pipe in the parent
            close(pipe_fd[0]);
            close(pipe_fd[1]);

            // Wait for both child processes to finish
            waitpid(child1_pid, NULL, 0);
            waitpid(child2_pid, NULL, 0);
        }
	}

	return 0;
}

/*Assignment 31: Write a C program which creates a child process to run linux/ unix command or any
user defined program. The parent process set the signal handler for death of child
signal and Alarm signal. If a child process does not complete its execution in 5
second then parent process kills child process*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
pid_t child_pid;
// Signal handler function for SIGCHLD
void sigchld_handler(int signum) {
    // Wait for the child process to avoid zombie processes
    while (waitpid(-1, NULL, WNOHANG) > 0)
        ;
}

// Signal handler function for SIGALRM
void sigalrm_handler(int signum) {
    printf("Child process execution time limit exceeded. Killing the child.\n");
    kill(child_pid, SIGTERM);
    exit(EXIT_FAILURE);
}

int main() {
    

    // Set signal handler for SIGCHLD
    signal(SIGCHLD, sigchld_handler);

    // Fork a child process
    if ((child_pid = fork()) == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) {
        // Child process
        // Replace this with the command you want the child to execute
        execlp("./papa", "papa", "", NULL);

        perror("execlp");
        exit(EXIT_FAILURE);
    } else {
        // Parent process
        // Set signal handler for SIGALRM
        signal(SIGALRM, sigalrm_handler);

        // Set an alarm for 5 seconds
        alarm(5);

        // Wait for the child process to finish
        waitpid(child_pid, NULL, 0);

        // Disable the alarm
        alarm(0);

        printf("Parent process exiting.\n");
    }

    return 0;
}

/*print the type of file where file name is accepted through command line arguments*/
#include<stdio.h>
#include<sys/stat.h>
int main(int argc, char **argv) {
	struct stat info;

	int fd;

	if(argc != 2) {
		printf("\nInvalid number of arguments.");
		return 0;
	}
	fd = stat(argv[1], &info);

	if(fd == -1) {
		printf("\n%s is invalid file", argv[1]);
		return 0;
	}
	if(S_ISDIR(info.st_mode)) {
		printf("\n%s is Directory", argv[1]);
	} else if(S_ISREG(info.st_mode)) {
		printf("\n%s is Regular file", argv[1]);
	} else if(S_ISBLK(info.st_mode)) {
		printf("\n%s is Block file", argv[1]);
	} else if(S_ISFIFO(info.st_mode)) {
		printf("\n%s is FIFO or Pipe file", argv[1]);
	} else if(S_ISCHR(info.st_mode)) {
		printf("\n%s is Character Special file", argv[1]);
	} else if(S_ISLNK(info.st_mode)) {
		printf("\n%s is Link File", argv[1]);
	} else if(S_ISSOCK(info.st_mode)) {
		printf("\n%s is Socket", argv[1]);
	}

	return 0;
}

/*Write a C program to find whether a given file is present in current directory or not*/

#include<stdio.h> 
#include<dirent.h> 
#include<stdlib.h> 
#include<sys/stat.h>
#include<string.h>

int main(int argc, char *argv[]) {
	DIR *dp;
	struct stat info;
	struct dirent *dirp;
	int found = 0;
	if(argc != 2) {
		printf("\nInvalid number of arguments. Expected one parameter as file name to be searched");
		exit(0);
	}

	dp = opendir(".");

	if(dp == NULL) {
		printf("\nCannot open current directory\n");
		exit(0);
	}
	printf("\nList of files matching search file name: %s\n", argv[1]);
	while((dirp = readdir(dp)) != NULL) {
		stat(dirp -> d_name, &info);
		if(S_ISREG(info.st_mode)) {
			if(strstr(dirp -> d_name, argv[1]) != NULL) {
				printf("\n%s", dirp -> d_name);
				found = 1;
			}
		}
	}

	if(!found) {
		printf("\nNo files found matching '%s'\n", argv[1]);	
	} else {
		printf("\n");
	}
	
	return 0;

	return 0;
}

/*Program to show list of files starting with some string*/
#include<stdio.h>
#include<dirent.h>
#include<stdlib.h>
#include<sys/stat.h>
#include<string.h>

int startsWith(char *str, char *input) {

	int i;
	for (i=0; input[i]!='\0'; i++) {
		if(str[i] != input[i]) {
			return 0;
		}
	}
	

	return 1;
}
int main(int argc,char **argv) {
	DIR *dp;
	struct stat info;
	struct dirent *dirp;
	int count = 0;
	char size;
	if(argc!= 2) {
		printf("\nInvalid number of arguments.\n");
		return 0;
	}

	dp = opendir(".");

	if(dp == NULL) {
		printf("\nCannot open current directory");
		exit(0);
	}
	
	printf("\nFile(s) starting with '%s'", argv[1]);
	while((dirp = readdir(dp)) != NULL) {
		if(startsWith(dirp->d_name, argv[1])) {
			printf("\n%s", dirp->d_name);
			count++;
		}
	}

	if(count == 0) {
		printf("\nNo files found in the current folder which start with '%s'\n", argv[1]);
	}
	return 0;
}

/*Read the current directory and display name of the files, no of files in current directory*/
#include<stdio.h>
#include<dirent.h>
#include<stdlib.h>
#include<sys/stat.h>

int main() {
	DIR *dp;
	struct stat info;
	struct dirent *dirp;
	int count = 0;

	dp = opendir(".");

	if(dp == NULL) {
		printf("\nCannot open current directory\n");
		exit(0);
	}

	printf("\nFile(s) in currect directory are: \n");

	while((dirp = readdir(dp)) != NULL) {
		stat(dirp->d_name, &info);
		if(S_ISREG(info.st_mode)) {
			printf("\n%s", dirp -> d_name);
			count++;
		}
	}
	printf("\n\nTotal number of files: %d\n", count);
	return 0;
}

/*Write a C program which recieves file names as command line arguments and display those in ascending order according to their sizes.*/

#include<stdio.h>
#include<sys/stat.h>
#include<sys/types.h>
#include<stdlib.h>

int main(int argc, char *argv[]) {

	struct stat info[argc-1];
	struct stat temp;
	char *tf;
	int i, j;

	if(argc == 1 || argc == 2) {
		printf("\nPlease send atleast 2 files as parameter");
		exit(0);
	}

	for(i=1; i<=argc; i++) {
		stat(argv[i], &info[i-1]);
	}

	for(i=0;i<argc-1;i++) {
		for(j=i+1; j<argc-1; j++) {
			if(info[j].st_size < info[i].st_size) {
				temp = info[i];
				info[i] = info[j];
				info[j] = temp;

				tf = argv[i+1];
				argv[i+1] = argv[j+1];
				argv[j+1] = tf;
			}
		}
	}

	printf("\nFiles sorted by size in ascending order: \n");
	printf("\n%-20s  Size in bytes", "File");
	for(i=0;i<argc-1;i++) {
		printf("\n%-20s  %5ld bytes", argv[i+1], info[i].st_size);
	}

	printf("\n");
	return 0;
}

/*Display all the files from current directory which are created in particular month*/

#include<stdio.h>
#include<dirent.h>
#include<string.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<time.h>
#include<stdlib.h>

int main(int argc, char *argv[]) {
	DIR *dp;
	struct stat info;
	struct dirent *dirp;
	char *dt;
	struct tm *tm_info;
	int month, year, found=0;
	int inputMonth, inputYear;

	inputMonth = atoi(argv[1]);
	inputYear = atoi(argv[2]);

	dp = opendir(".");

	if(dp == NULL) {
		printf("\nCannot open current directory\n");
		exit(0);
	}
	printf("\n%-20s  File creation date and time\n", "File name");
	while((dirp = readdir(dp)) != NULL) {
		if(stat(dirp -> d_name, &info) != -1) {
			tm_info = localtime(&info.st_ctime);
			month = tm_info -> tm_mon + 1;
			year = tm_info -> tm_year + 1900;

			if(month == inputMonth && year == inputYear) {
				found = 1;
				printf("\n%-20s  %s", dirp -> d_name, ctime(&info.st_ctime));
			}
		}
	}

	/*time_t timer;
	int month;

	time(&timer);
	tm_info = localtime(&timer);
	month = tm_info->tm_mon + 1;

	printf("The month is %d\n", month);*/
	if(!found) {
		printf("\nNo files found those are created in the month of %d and year %d\n", inputMonth, inputYear);
	}
	exit(0);
}